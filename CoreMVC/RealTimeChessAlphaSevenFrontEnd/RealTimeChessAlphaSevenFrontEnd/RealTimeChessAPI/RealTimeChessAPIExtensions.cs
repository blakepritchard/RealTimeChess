// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace RealTimeChessAlphaSevenFrontEnd
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for RealTimeChessAPI.
    /// </summary>
    public static partial class RealTimeChessAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            public static void AccountLoginGet(this IRealTimeChessAPI operations, string returnUrl = default(string))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).AccountLoginGetAsync(returnUrl), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AccountLoginGetAsync(this IRealTimeChessAPI operations, string returnUrl = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AccountLoginGetWithHttpMessagesAsync(returnUrl, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            public static void AccountLoginPost(this IRealTimeChessAPI operations, string email, string password, bool rememberMe, string returnUrl = default(string))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).AccountLoginPostAsync(email, password, rememberMe, returnUrl), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AccountLoginPostAsync(this IRealTimeChessAPI operations, string email, string password, bool rememberMe, string returnUrl = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AccountLoginPostWithHttpMessagesAsync(email, password, rememberMe, returnUrl, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            public static void AccountLoginWith2faGet(this IRealTimeChessAPI operations, bool rememberMe, string returnUrl = default(string))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).AccountLoginWith2faGetAsync(rememberMe, returnUrl), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AccountLoginWith2faGetAsync(this IRealTimeChessAPI operations, bool rememberMe, string returnUrl = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AccountLoginWith2faGetWithHttpMessagesAsync(rememberMe, returnUrl, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='twoFactorCode'>
            /// </param>
            /// <param name='rememberMachine'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='rememberMe1'>
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            public static void AccountLoginWith2faPost(this IRealTimeChessAPI operations, string twoFactorCode, bool rememberMachine, bool rememberMe, bool rememberMe1, string returnUrl = default(string))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).AccountLoginWith2faPostAsync(twoFactorCode, rememberMachine, rememberMe, rememberMe1, returnUrl), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='twoFactorCode'>
            /// </param>
            /// <param name='rememberMachine'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='rememberMe1'>
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AccountLoginWith2faPostAsync(this IRealTimeChessAPI operations, string twoFactorCode, bool rememberMachine, bool rememberMe, bool rememberMe1, string returnUrl = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AccountLoginWith2faPostWithHttpMessagesAsync(twoFactorCode, rememberMachine, rememberMe, rememberMe1, returnUrl, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            public static void AccountLoginWithRecoveryCodeGet(this IRealTimeChessAPI operations, string returnUrl = default(string))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).AccountLoginWithRecoveryCodeGetAsync(returnUrl), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AccountLoginWithRecoveryCodeGetAsync(this IRealTimeChessAPI operations, string returnUrl = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AccountLoginWithRecoveryCodeGetWithHttpMessagesAsync(returnUrl, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryCode'>
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            public static void AccountLoginWithRecoveryCodePost(this IRealTimeChessAPI operations, string recoveryCode, string returnUrl = default(string))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).AccountLoginWithRecoveryCodePostAsync(recoveryCode, returnUrl), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryCode'>
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AccountLoginWithRecoveryCodePostAsync(this IRealTimeChessAPI operations, string recoveryCode, string returnUrl = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AccountLoginWithRecoveryCodePostWithHttpMessagesAsync(recoveryCode, returnUrl, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void AccountLockoutGet(this IRealTimeChessAPI operations)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).AccountLockoutGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AccountLockoutGetAsync(this IRealTimeChessAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AccountLockoutGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            public static void AccountRegisterGet(this IRealTimeChessAPI operations, string returnUrl = default(string))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).AccountRegisterGetAsync(returnUrl), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AccountRegisterGetAsync(this IRealTimeChessAPI operations, string returnUrl = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AccountRegisterGetWithHttpMessagesAsync(returnUrl, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='confirmPassword'>
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            public static void AccountRegisterPost(this IRealTimeChessAPI operations, string email, string password, string confirmPassword = default(string), string returnUrl = default(string))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).AccountRegisterPostAsync(email, password, confirmPassword, returnUrl), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='confirmPassword'>
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AccountRegisterPostAsync(this IRealTimeChessAPI operations, string email, string password, string confirmPassword = default(string), string returnUrl = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AccountRegisterPostWithHttpMessagesAsync(email, password, confirmPassword, returnUrl, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void AccountLogoutPost(this IRealTimeChessAPI operations)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).AccountLogoutPostAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AccountLogoutPostAsync(this IRealTimeChessAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AccountLogoutPostWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            public static void AccountExternalLoginPost(this IRealTimeChessAPI operations, string provider = default(string), string returnUrl = default(string))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).AccountExternalLoginPostAsync(provider, returnUrl), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AccountExternalLoginPostAsync(this IRealTimeChessAPI operations, string provider = default(string), string returnUrl = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AccountExternalLoginPostWithHttpMessagesAsync(provider, returnUrl, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            /// <param name='remoteError'>
            /// </param>
            public static void AccountExternalLoginCallbackGet(this IRealTimeChessAPI operations, string returnUrl = default(string), string remoteError = default(string))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).AccountExternalLoginCallbackGetAsync(returnUrl, remoteError), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            /// <param name='remoteError'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AccountExternalLoginCallbackGetAsync(this IRealTimeChessAPI operations, string returnUrl = default(string), string remoteError = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AccountExternalLoginCallbackGetWithHttpMessagesAsync(returnUrl, remoteError, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            public static void AccountExternalLoginConfirmationPost(this IRealTimeChessAPI operations, string email, string returnUrl = default(string))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).AccountExternalLoginConfirmationPostAsync(email, returnUrl), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AccountExternalLoginConfirmationPostAsync(this IRealTimeChessAPI operations, string email, string returnUrl = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AccountExternalLoginConfirmationPostWithHttpMessagesAsync(email, returnUrl, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='code'>
            /// </param>
            public static void AccountConfirmEmailGet(this IRealTimeChessAPI operations, string userId = default(string), string code = default(string))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).AccountConfirmEmailGetAsync(userId, code), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AccountConfirmEmailGetAsync(this IRealTimeChessAPI operations, string userId = default(string), string code = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AccountConfirmEmailGetWithHttpMessagesAsync(userId, code, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void AccountForgotPasswordGet(this IRealTimeChessAPI operations)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).AccountForgotPasswordGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AccountForgotPasswordGetAsync(this IRealTimeChessAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AccountForgotPasswordGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            public static void AccountForgotPasswordPost(this IRealTimeChessAPI operations, string email)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).AccountForgotPasswordPostAsync(email), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AccountForgotPasswordPostAsync(this IRealTimeChessAPI operations, string email, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AccountForgotPasswordPostWithHttpMessagesAsync(email, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void AccountForgotPasswordConfirmationGet(this IRealTimeChessAPI operations)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).AccountForgotPasswordConfirmationGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AccountForgotPasswordConfirmationGetAsync(this IRealTimeChessAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AccountForgotPasswordConfirmationGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// </param>
            public static void AccountResetPasswordGet(this IRealTimeChessAPI operations, string code = default(string))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).AccountResetPasswordGetAsync(code), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AccountResetPasswordGetAsync(this IRealTimeChessAPI operations, string code = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AccountResetPasswordGetWithHttpMessagesAsync(code, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='confirmPassword'>
            /// </param>
            /// <param name='code'>
            /// </param>
            public static void AccountResetPasswordPost(this IRealTimeChessAPI operations, string email, string password, string confirmPassword = default(string), string code = default(string))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).AccountResetPasswordPostAsync(email, password, confirmPassword, code), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='confirmPassword'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AccountResetPasswordPostAsync(this IRealTimeChessAPI operations, string email, string password, string confirmPassword = default(string), string code = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AccountResetPasswordPostWithHttpMessagesAsync(email, password, confirmPassword, code, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void AccountResetPasswordConfirmationGet(this IRealTimeChessAPI operations)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).AccountResetPasswordConfirmationGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AccountResetPasswordConfirmationGetAsync(this IRealTimeChessAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AccountResetPasswordConfirmationGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void AccountAccessDeniedGet(this IRealTimeChessAPI operations)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).AccountAccessDeniedGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AccountAccessDeniedGetAsync(this IRealTimeChessAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AccountAccessDeniedGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ChessMatch> ApiChessMatchesGet(this IRealTimeChessAPI operations)
            {
                return Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiChessMatchesGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ChessMatch>> ApiChessMatchesGetAsync(this IRealTimeChessAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiChessMatchesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chessMatch'>
            /// </param>
            public static void ApiChessMatchesPost(this IRealTimeChessAPI operations, ChessMatch chessMatch = default(ChessMatch))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiChessMatchesPostAsync(chessMatch), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chessMatch'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiChessMatchesPostAsync(this IRealTimeChessAPI operations, ChessMatch chessMatch = default(ChessMatch), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiChessMatchesPostWithHttpMessagesAsync(chessMatch, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiChessMatchesByIdGet(this IRealTimeChessAPI operations, int id)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiChessMatchesByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiChessMatchesByIdGetAsync(this IRealTimeChessAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiChessMatchesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='chessMatch'>
            /// </param>
            public static void ApiChessMatchesByIdPut(this IRealTimeChessAPI operations, int id, ChessMatch chessMatch = default(ChessMatch))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiChessMatchesByIdPutAsync(id, chessMatch), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='chessMatch'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiChessMatchesByIdPutAsync(this IRealTimeChessAPI operations, int id, ChessMatch chessMatch = default(ChessMatch), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiChessMatchesByIdPutWithHttpMessagesAsync(id, chessMatch, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiChessMatchesByIdDelete(this IRealTimeChessAPI operations, int id)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiChessMatchesByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiChessMatchesByIdDeleteAsync(this IRealTimeChessAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiChessMatchesByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ManageIndexGet(this IRealTimeChessAPI operations)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ManageIndexGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ManageIndexGetAsync(this IRealTimeChessAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ManageIndexGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='isEmailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='username'>
            /// </param>
            /// <param name='phoneNumber'>
            /// </param>
            /// <param name='statusMessage'>
            /// </param>
            public static void ManageIndexPost(this IRealTimeChessAPI operations, bool isEmailConfirmed, string email, string username = default(string), string phoneNumber = default(string), string statusMessage = default(string))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ManageIndexPostAsync(isEmailConfirmed, email, username, phoneNumber, statusMessage), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='isEmailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='username'>
            /// </param>
            /// <param name='phoneNumber'>
            /// </param>
            /// <param name='statusMessage'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ManageIndexPostAsync(this IRealTimeChessAPI operations, bool isEmailConfirmed, string email, string username = default(string), string phoneNumber = default(string), string statusMessage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ManageIndexPostWithHttpMessagesAsync(isEmailConfirmed, email, username, phoneNumber, statusMessage, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='isEmailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='username'>
            /// </param>
            /// <param name='phoneNumber'>
            /// </param>
            /// <param name='statusMessage'>
            /// </param>
            public static void ManageSendVerificationEmailPost(this IRealTimeChessAPI operations, bool isEmailConfirmed, string email, string username = default(string), string phoneNumber = default(string), string statusMessage = default(string))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ManageSendVerificationEmailPostAsync(isEmailConfirmed, email, username, phoneNumber, statusMessage), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='isEmailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='username'>
            /// </param>
            /// <param name='phoneNumber'>
            /// </param>
            /// <param name='statusMessage'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ManageSendVerificationEmailPostAsync(this IRealTimeChessAPI operations, bool isEmailConfirmed, string email, string username = default(string), string phoneNumber = default(string), string statusMessage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ManageSendVerificationEmailPostWithHttpMessagesAsync(isEmailConfirmed, email, username, phoneNumber, statusMessage, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ManageChangePasswordGet(this IRealTimeChessAPI operations)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ManageChangePasswordGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ManageChangePasswordGetAsync(this IRealTimeChessAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ManageChangePasswordGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='oldPassword'>
            /// </param>
            /// <param name='newPassword'>
            /// </param>
            /// <param name='confirmPassword'>
            /// </param>
            /// <param name='statusMessage'>
            /// </param>
            public static void ManageChangePasswordPost(this IRealTimeChessAPI operations, string oldPassword, string newPassword, string confirmPassword = default(string), string statusMessage = default(string))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ManageChangePasswordPostAsync(oldPassword, newPassword, confirmPassword, statusMessage), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='oldPassword'>
            /// </param>
            /// <param name='newPassword'>
            /// </param>
            /// <param name='confirmPassword'>
            /// </param>
            /// <param name='statusMessage'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ManageChangePasswordPostAsync(this IRealTimeChessAPI operations, string oldPassword, string newPassword, string confirmPassword = default(string), string statusMessage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ManageChangePasswordPostWithHttpMessagesAsync(oldPassword, newPassword, confirmPassword, statusMessage, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ManageSetPasswordGet(this IRealTimeChessAPI operations)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ManageSetPasswordGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ManageSetPasswordGetAsync(this IRealTimeChessAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ManageSetPasswordGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='newPassword'>
            /// </param>
            /// <param name='confirmPassword'>
            /// </param>
            /// <param name='statusMessage'>
            /// </param>
            public static void ManageSetPasswordPost(this IRealTimeChessAPI operations, string newPassword, string confirmPassword = default(string), string statusMessage = default(string))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ManageSetPasswordPostAsync(newPassword, confirmPassword, statusMessage), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='newPassword'>
            /// </param>
            /// <param name='confirmPassword'>
            /// </param>
            /// <param name='statusMessage'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ManageSetPasswordPostAsync(this IRealTimeChessAPI operations, string newPassword, string confirmPassword = default(string), string statusMessage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ManageSetPasswordPostWithHttpMessagesAsync(newPassword, confirmPassword, statusMessage, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ManageExternalLoginsGet(this IRealTimeChessAPI operations)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ManageExternalLoginsGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ManageExternalLoginsGetAsync(this IRealTimeChessAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ManageExternalLoginsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            public static void ManageLinkLoginPost(this IRealTimeChessAPI operations, string provider = default(string))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ManageLinkLoginPostAsync(provider), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ManageLinkLoginPostAsync(this IRealTimeChessAPI operations, string provider = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ManageLinkLoginPostWithHttpMessagesAsync(provider, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ManageLinkLoginCallbackGet(this IRealTimeChessAPI operations)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ManageLinkLoginCallbackGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ManageLinkLoginCallbackGetAsync(this IRealTimeChessAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ManageLinkLoginCallbackGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='loginProvider'>
            /// </param>
            /// <param name='providerKey'>
            /// </param>
            public static void ManageRemoveLoginPost(this IRealTimeChessAPI operations, string loginProvider = default(string), string providerKey = default(string))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ManageRemoveLoginPostAsync(loginProvider, providerKey), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='loginProvider'>
            /// </param>
            /// <param name='providerKey'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ManageRemoveLoginPostAsync(this IRealTimeChessAPI operations, string loginProvider = default(string), string providerKey = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ManageRemoveLoginPostWithHttpMessagesAsync(loginProvider, providerKey, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ManageTwoFactorAuthenticationGet(this IRealTimeChessAPI operations)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ManageTwoFactorAuthenticationGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ManageTwoFactorAuthenticationGetAsync(this IRealTimeChessAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ManageTwoFactorAuthenticationGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ManageDisable2faWarningGet(this IRealTimeChessAPI operations)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ManageDisable2faWarningGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ManageDisable2faWarningGetAsync(this IRealTimeChessAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ManageDisable2faWarningGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ManageDisable2faPost(this IRealTimeChessAPI operations)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ManageDisable2faPostAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ManageDisable2faPostAsync(this IRealTimeChessAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ManageDisable2faPostWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ManageEnableAuthenticatorGet(this IRealTimeChessAPI operations)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ManageEnableAuthenticatorGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ManageEnableAuthenticatorGetAsync(this IRealTimeChessAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ManageEnableAuthenticatorGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='sharedKey'>
            /// </param>
            /// <param name='authenticatorUri'>
            /// </param>
            public static void ManageEnableAuthenticatorPost(this IRealTimeChessAPI operations, string code, string sharedKey = default(string), string authenticatorUri = default(string))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ManageEnableAuthenticatorPostAsync(code, sharedKey, authenticatorUri), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='sharedKey'>
            /// </param>
            /// <param name='authenticatorUri'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ManageEnableAuthenticatorPostAsync(this IRealTimeChessAPI operations, string code, string sharedKey = default(string), string authenticatorUri = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ManageEnableAuthenticatorPostWithHttpMessagesAsync(code, sharedKey, authenticatorUri, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ManageShowRecoveryCodesGet(this IRealTimeChessAPI operations)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ManageShowRecoveryCodesGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ManageShowRecoveryCodesGetAsync(this IRealTimeChessAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ManageShowRecoveryCodesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ManageResetAuthenticatorWarningGet(this IRealTimeChessAPI operations)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ManageResetAuthenticatorWarningGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ManageResetAuthenticatorWarningGetAsync(this IRealTimeChessAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ManageResetAuthenticatorWarningGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ManageResetAuthenticatorPost(this IRealTimeChessAPI operations)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ManageResetAuthenticatorPostAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ManageResetAuthenticatorPostAsync(this IRealTimeChessAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ManageResetAuthenticatorPostWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ManageGenerateRecoveryCodesWarningGet(this IRealTimeChessAPI operations)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ManageGenerateRecoveryCodesWarningGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ManageGenerateRecoveryCodesWarningGetAsync(this IRealTimeChessAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ManageGenerateRecoveryCodesWarningGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ManageGenerateRecoveryCodesPost(this IRealTimeChessAPI operations)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ManageGenerateRecoveryCodesPostAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ManageGenerateRecoveryCodesPostAsync(this IRealTimeChessAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ManageGenerateRecoveryCodesPostWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<MatchPlayer> ApiMatchPlayersGet(this IRealTimeChessAPI operations)
            {
                return Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiMatchPlayersGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MatchPlayer>> ApiMatchPlayersGetAsync(this IRealTimeChessAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMatchPlayersGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='matchPlayer'>
            /// </param>
            public static void ApiMatchPlayersPost(this IRealTimeChessAPI operations, MatchPlayer matchPlayer = default(MatchPlayer))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiMatchPlayersPostAsync(matchPlayer), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='matchPlayer'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiMatchPlayersPostAsync(this IRealTimeChessAPI operations, MatchPlayer matchPlayer = default(MatchPlayer), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiMatchPlayersPostWithHttpMessagesAsync(matchPlayer, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiMatchPlayersByIdGet(this IRealTimeChessAPI operations, int id)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiMatchPlayersByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiMatchPlayersByIdGetAsync(this IRealTimeChessAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiMatchPlayersByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='matchPlayer'>
            /// </param>
            public static void ApiMatchPlayersByIdPut(this IRealTimeChessAPI operations, int id, MatchPlayer matchPlayer = default(MatchPlayer))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiMatchPlayersByIdPutAsync(id, matchPlayer), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='matchPlayer'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiMatchPlayersByIdPutAsync(this IRealTimeChessAPI operations, int id, MatchPlayer matchPlayer = default(MatchPlayer), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiMatchPlayersByIdPutWithHttpMessagesAsync(id, matchPlayer, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiMatchPlayersByIdDelete(this IRealTimeChessAPI operations, int id)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiMatchPlayersByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiMatchPlayersByIdDeleteAsync(this IRealTimeChessAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiMatchPlayersByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Move> ApiMovesGet(this IRealTimeChessAPI operations)
            {
                return Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiMovesGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Move>> ApiMovesGetAsync(this IRealTimeChessAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMovesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='move'>
            /// </param>
            public static void ApiMovesPost(this IRealTimeChessAPI operations, Move move = default(Move))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiMovesPostAsync(move), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='move'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiMovesPostAsync(this IRealTimeChessAPI operations, Move move = default(Move), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiMovesPostWithHttpMessagesAsync(move, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiMovesByIdGet(this IRealTimeChessAPI operations, int id)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiMovesByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiMovesByIdGetAsync(this IRealTimeChessAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiMovesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='move'>
            /// </param>
            public static void ApiMovesByIdPut(this IRealTimeChessAPI operations, int id, Move move = default(Move))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiMovesByIdPutAsync(id, move), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='move'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiMovesByIdPutAsync(this IRealTimeChessAPI operations, int id, Move move = default(Move), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiMovesByIdPutWithHttpMessagesAsync(id, move, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiMovesByIdDelete(this IRealTimeChessAPI operations, int id)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiMovesByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiMovesByIdDeleteAsync(this IRealTimeChessAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiMovesByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Player> ApiPlayersGet(this IRealTimeChessAPI operations)
            {
                return Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiPlayersGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Player>> ApiPlayersGetAsync(this IRealTimeChessAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPlayersGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='player'>
            /// </param>
            public static void ApiPlayersPost(this IRealTimeChessAPI operations, Player player = default(Player))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiPlayersPostAsync(player), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='player'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPlayersPostAsync(this IRealTimeChessAPI operations, Player player = default(Player), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiPlayersPostWithHttpMessagesAsync(player, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiPlayersByIdGet(this IRealTimeChessAPI operations, int id)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiPlayersByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();            
            }
            public static void ApiPlayersByIdGetEx(this IRealTimeChessAPI operations, int id)
            {
                var taskGet = Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiPlayersByIdGetAsyncEx(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default);
                
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPlayersByIdGetAsync(this IRealTimeChessAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiPlayersByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }
            public static async Task<HttpOperationResponse> ApiPlayersByIdGetAsyncEx(this IRealTimeChessAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                return await operations.ApiPlayersByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);

            }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='player'>
        /// </param>
        public static void ApiPlayersByIdPut(this IRealTimeChessAPI operations, int id, Player player = default(Player))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiPlayersByIdPutAsync(id, player), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='player'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPlayersByIdPutAsync(this IRealTimeChessAPI operations, int id, Player player = default(Player), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiPlayersByIdPutWithHttpMessagesAsync(id, player, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiPlayersByIdDelete(this IRealTimeChessAPI operations, int id)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiPlayersByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPlayersByIdDeleteAsync(this IRealTimeChessAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiPlayersByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<PlayerType> ApiPlayerTypesGet(this IRealTimeChessAPI operations)
            {
                return Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiPlayerTypesGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PlayerType>> ApiPlayerTypesGetAsync(this IRealTimeChessAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiPlayerTypesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='playerType'>
            /// </param>
            public static void ApiPlayerTypesPost(this IRealTimeChessAPI operations, PlayerType playerType = default(PlayerType))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiPlayerTypesPostAsync(playerType), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='playerType'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPlayerTypesPostAsync(this IRealTimeChessAPI operations, PlayerType playerType = default(PlayerType), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiPlayerTypesPostWithHttpMessagesAsync(playerType, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiPlayerTypesByIdGet(this IRealTimeChessAPI operations, int id)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiPlayerTypesByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPlayerTypesByIdGetAsync(this IRealTimeChessAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiPlayerTypesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='playerType'>
            /// </param>
            public static void ApiPlayerTypesByIdPut(this IRealTimeChessAPI operations, int id, PlayerType playerType = default(PlayerType))
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiPlayerTypesByIdPutAsync(id, playerType), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='playerType'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPlayerTypesByIdPutAsync(this IRealTimeChessAPI operations, int id, PlayerType playerType = default(PlayerType), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiPlayerTypesByIdPutWithHttpMessagesAsync(id, playerType, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiPlayerTypesByIdDelete(this IRealTimeChessAPI operations, int id)
            {
                Task.Factory.StartNew(s => ((IRealTimeChessAPI)s).ApiPlayerTypesByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiPlayerTypesByIdDeleteAsync(this IRealTimeChessAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiPlayerTypesByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
